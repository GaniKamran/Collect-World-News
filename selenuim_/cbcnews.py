# Generated by Selenium IDE

import time
import json
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.support import expected_conditions
from selenium.webdriver.support.wait import WebDriverWait
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.desired_capabilities import DesiredCapabilities
from bs4 import BeautifulSoup


class Cbcnews():
  def setup_method(self):
    self.driver = webdriver.Chrome()
    self.vars = {}
  
  def teardown_method(self, method):
    self.driver.quit()
  
  def cbcnews(self):
    self.setup_method()
    self.driver.get("https://www.cbsnews.com/")
    self.driver.set_window_size(1120, 523)
    element = self.driver.find_element(By.CSS_SELECTOR, ".super-nav .site-nav__item:nth-child(6) .site-nav__item-text")
    # Get the page source after dynamic content has loaded
    page_source = self.driver.page_source

    # Parse the HTML content of the page using Beautiful Soup
    soup = BeautifulSoup(page_source, 'html.parser')

    # Example: Extracting all the links on the page
    links = soup.find_all('a')
    for link in links:
        print(link.get('href'))

    # Example: Extracting text from a specific element with class 'example-class'
    example_element = self.driver.find_element(By.CLASS_NAME, 'example-class')
    if example_element:
        print(example_element.text)
    else:
        print("Element not found.")

td=Cbcnews()

td.cbcnews()
  
